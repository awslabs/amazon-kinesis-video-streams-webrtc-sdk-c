language: cpp
sudo: true

branches:
  only:
    - master
    - develop

cache:
  - directories:
      - $HOME/.cache

services:
  - docker

addons:
  apt:
    packages:
      - gdb
      - docker-ce

script:
  - export AWS_KVS_LOG_LEVEL=3
  - make
  - ulimit -c unlimited -S
  - timeout --signal=SIGABRT 60m ./tst/webrtc_client_test

after_failure:
  - for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/tst/webrtc_client_test core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done;

matrix:
  # MemorySanitizer and UndefinedBehaviorSanitizer are still WIP
  allow_failures:
    - env: allowTestFail=true

  include:
    
    # MemorySanitizer
    - name: "Linux Clang MemorySanitizer"
      env: allowTestFail=true
      before_install:
        # TODO: Remove the following 2 lines. This is only a workaround for enabling IPv6, https://github.com/travis-ci/travis-ci/issues/8891.
        - echo '{"ipv6":true,"fixed-cidr-v6":"2001:db8:1::/64"}' | sudo tee /etc/docker/daemon.json
        - sudo service docker restart
        - mkdir build
        - docker run -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -w /src/build -dit --name msan-tester -v $(pwd):/src seaduboi/kvs-msan-tester
        - msan-tester() { docker exec -it msan-tester "$@"; }
      script:
        - msan-tester cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_DEPENDENCIES=FALSE -DBUILD_TEST=TRUE -DMEMORY_SANITIZER=TRUE -DCMAKE_CXX_FLAGS="-stdlib=libc++ -L/usr/src/libcxx_msan/lib -lc++abi -I/usr/src/libcxx_msan/include -I/usr/src/libcxx_msan/include/c++/v1 -fsanitize=memory -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-memory-track-origins"
        - msan-tester make
        - msan-tester ./tst/webrtc_client_test
      after_failure: skip # no coredumps in container

    - name: "Windows MSVC"
      env: allowTestFail=true
      os: windows
      script:
        - choco install nasm strawberryperl
        - unset CC CC_FOR_BUILD CXX CXX_FOR_BUILD # We want to use MSVC
        - export "PATH=/c/Strawberry/perl/site/bin:/c/Strawberry/perl/bin:/c/Strawberry/c/bin:/c/Program Files/NASM:`pwd`/open-source/lib:`pwd`/open-source/bin:$PATH"
        - .github/build_windows.bat
        - cd build/tst && ./webrtc_client_test.exe --gtest_filter="-DataChannelFunctionalityTest.*:IceApiTest.*:IceFunctionalityTest.*:PeerConnectionFunctionalityTest.*:SignalingApiFunctionalityTest.*:TurnConnectionFunctionalityTest.*:RtpFunctionalityTest.marshallUnmarshallH264Data:RtpFunctionalityTest.packingUnpackingVerifySameH264Frame:RtcpFunctionalityTest.onRtcpPacketCompound:RtcpFunctionalityTest.twcc3"

    # Generate Doxygen
    - name: "Generate Doxygen"
      if: type = push
      before_install:
        - docker run -w /src/.github -dit --name alpine -v $(pwd):/src alpine
        - alpine() { docker exec -it alpine "$@"; }
        - alpine apk update
        - alpine apk add doxygen graphviz
        - alpine apk add --no-cache ttf-freefont
      script:
        # Add SSH key to agent
        - |
          eval "$(ssh-agent -s)"
          openssl aes-256-cbc -K $encrypted_d627db542948_key -iv $encrypted_d627db542948_iv -in .github/github_deploy_key.enc -out .github/github_deploy_key -d
          chmod 600 .github/github_deploy_key
          ssh-add .github/github_deploy_key
          rm .github/github_deploy_key
        # Generate doxygen in container, need latest version
        - alpine doxygen Doxyfile
        - alpine chmod -R 777 doc
        - mv .github/doc/html /tmp
        # Unshallow repo
        - |
          git remote rm origin
          git remote add origin git@github.com:awslabs/amazon-kinesis-video-streams-webrtc-sdk-c.git
          git fetch
        # Move to gh-pages and create new commit
        - |
          git checkout gh-pages
          rm -rf * .github
          mv /tmp/html/* .
        # Commit and push
        - |
          git add .
          git commit -m "Auto-generated from travis"
          git push