language: cpp
sudo: true

branches:
  only:
  - master

cache:
- directories:
  - $HOME/.cache

install:
  - sudo apt-get install -y gdb

script:
  - make
  - ulimit -c unlimited -S
  - timeout --signal=SIGABRT 10m ./tst/webrtc_client_test

after_failure:
  - for i in $(find ./ -maxdepth 1 -name 'core*' -print); do gdb $(pwd)/tst/webrtc_client_test core* -ex "thread apply all bt" -ex "set pagination 0" -batch; done;

matrix:
  # MemorySanitizer and UndefinedBehaviorSanitizer are still WIP
  allow_failures:
    - env: allowTestFail=true

  include:
    # MacOS Builds
    - name: "OSX GCC"
      os: osx
      compiler: gcc
      install: skip # apt-get not available on MacOS
      before_script:
        - mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE
      script:
        - make
        - ./tst/webrtc_client_test
      after_failure: skip # timeout not available on MacOS

    - name: "OSX Clang"
      os: osx
      compiler: clang
      install: skip # apt-get not available on MacOS
      before_script:
        - mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE
      script:
        - make
        - ./tst/webrtc_client_test
      after_failure: skip # timeout not available on MacOS

    # Code Coverage
    - name: "Linux GCC Code Coverage"
      os: linux
      compiler: gcc
      before_script:
        - mkdir build && cd build && cmake .. -DCODE_COVERAGE=TRUE -DBUILD_TEST=TRUE
      after_success:
        - for test_file in $(find CMakeFiles/kvsWebrtcClient.dir CMakeFiles/kvsWebrtcSignalingClient.dir -name '*.gcno'); do gcov $test_file; done
        - bash <(curl -s https://codecov.io/bash)

    # AddressSanitizer
    - name: "Linux Clang AddressSanitizer"
      os: linux
      compiler: clang
      env: ASAN_OPTIONS=detect_odr_violation=0
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DADDRESS_SANITIZER=TRUE

    # MemorySanitizer
    - name: "Linux Clang MemorySanitizer"
      os: linux
      compiler: clang
      env: allowTestFail=true
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DMEMORY_SANITIZER=TRUE

    # ThreadSanitizer
    - name: "Linux Clang ThreadSanitizer"
      os: linux
      compiler: clang
      env: allowTestFail=true
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DTHREAD_SANITIZER=TRUE

    # UndefinedBehaviorSanitizer
    - name: "Linux Clang UndefinedBehaviorSanitizer"
      os: linux
      compiler: clang
      before_script: mkdir build && cd build && cmake .. -DBUILD_TEST=TRUE -DUNDEFINED_BEHAVIOR_SANITIZER=TRUE
